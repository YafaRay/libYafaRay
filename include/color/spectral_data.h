#pragma once
/****************************************************************************
 *      This is part of the libYafaRay package
 *
 *      spectralData.h - Chromatic Match Functions from CIE Standard Observer 1932 2-Degrees
 *      Created on: 28/03/2009
 *      Author: Rodrigo Placencia (DarkTide)
 *
 *      This library is free software; you can redistribute it and/or
 *      modify it under the terms of the GNU Lesser General Public
 *      License as published by the Free Software Foundation; either
 *      version 2.1 of the Licensef, or (at your option) any later version.
 *
 *      This library is distributed in the hope that it will be usefulf,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *      Lesser General Public License for more details.
 *
 *      You should have received a copy of the GNU Lesser General Public
 *      License along with this library; if notf, write to the Free Software
 *      Foundationf,Inc.f, 59 Temple Placef, Suite 330f, Bostonf, MA 02111-1307 USA
 */

#ifndef YAFARAY_SPECTRAL_DATA_H
#define YAFARAY_SPECTRAL_DATA_H

namespace yafaray {

#include <array>

namespace spectral_data
{

static constexpr std::array<std::array<float, 3>, 95> chroma_match_2_deg //[Lambda][chromacord] Wavelength range 360-830 @ 5nm interval
{{
	{0.000129900000f, 0.000003917000f, 0.000606100000f}, {0.000232100000f, 0.000006965000f, 0.001086000000f},
	{0.000414900000f, 0.000012390000f, 0.001946000000f}, {0.000741600000f, 0.000022020000f, 0.003486000000f},
	{0.001368000000f, 0.000039000000f, 0.006450001000f}, {0.002236000000f, 0.000064000000f, 0.010549990000f},
	{0.004243000000f, 0.000120000000f, 0.020050010000f}, {0.007650000000f, 0.000217000000f, 0.036210000000f},
	{0.014310000000f, 0.000396000000f, 0.067850010000f}, {0.023190000000f, 0.000640000000f, 0.110200000000f},

	{0.043510000000f, 0.001210000000f, 0.207400000000f}, {0.077630000000f, 0.002180000000f, 0.371300000000f},
	{0.134380000000f, 0.004000000000f, 0.645600000000f}, {0.214770000000f, 0.007300000000f, 1.039050100000f},
	{0.283900000000f, 0.011600000000f, 1.385600000000f}, {0.328500000000f, 0.016840000000f, 1.622960000000f},
	{0.348280000000f, 0.023000000000f, 1.747060000000f}, {0.348060000000f, 0.029800000000f, 1.782600000000f},
	{0.336200000000f, 0.038000000000f, 1.772110000000f}, {0.318700000000f, 0.048000000000f, 1.744100000000f},

	{0.290800000000f, 0.060000000000f, 1.669200000000f}, {0.251100000000f, 0.073900000000f, 1.528100000000f},
	{0.195360000000f, 0.090980000000f, 1.287640000000f}, {0.142100000000f, 0.112600000000f, 1.041900000000f},
	{0.095640000000f, 0.139020000000f, 0.812950100000f}, {0.057950010000f, 0.169300000000f, 0.616200000000f},
	{0.032010000000f, 0.208020000000f, 0.465180000000f}, {0.014700000000f, 0.258600000000f, 0.353300000000f},
	{0.004900000000f, 0.323000000000f, 0.272000000000f}, {0.002400000000f, 0.407300000000f, 0.212300000000f},

	{0.009300000000f, 0.503000000000f, 0.158200000000f}, {0.029100000000f, 0.608200000000f, 0.111700000000f},
	{0.063270000000f, 0.710000000000f, 0.078249990000f}, {0.109600000000f, 0.793200000000f, 0.057250010000f},
	{0.165500000000f, 0.862000000000f, 0.042160000000f}, {0.225749900000f, 0.914850100000f, 0.029840000000f},
	{0.290400000000f, 0.954000000000f, 0.020300000000f}, {0.359700000000f, 0.980300000000f, 0.013400000000f},
	{0.433449900000f, 0.994950100000f, 0.008749999000f}, {0.512050100000f, 1.000000000000f, 0.005749999000f},

	{0.594500000000f, 0.995000000000f, 0.003900000000f}, {0.678400000000f, 0.978600000000f, 0.002749999000f},
	{0.762100000000f, 0.952000000000f, 0.002100000000f}, {0.842500000000f, 0.915400000000f, 0.001800000000f},
	{0.916300000000f, 0.870000000000f, 0.001650001000f}, {0.978600000000f, 0.816300000000f, 0.001400000000f},
	{1.026300000000f, 0.757000000000f, 0.001100000000f}, {1.056700000000f, 0.694900000000f, 0.001000000000f},
	{1.062200000000f, 0.631000000000f, 0.000800000000f}, {1.045600000000f, 0.566800000000f, 0.000600000000f},

	{1.002600000000f, 0.503000000000f, 0.000340000000f}, {0.938400000000f, 0.441200000000f, 0.000240000000f},
	{0.854449900000f, 0.381000000000f, 0.000190000000f}, {0.751400000000f, 0.321000000000f, 0.000100000000f},
	{0.642400000000f, 0.265000000000f, 0.000049999990f}, {0.541900000000f, 0.217000000000f, 0.000030000000f},
	{0.447900000000f, 0.175000000000f, 0.000020000000f}, {0.360800000000f, 0.138200000000f, 0.000010000000f},
	{0.283500000000f, 0.107000000000f, 0.000000000000f}, {0.218700000000f, 0.081600000000f, 0.000000000000f},

	{0.164900000000f, 0.061000000000f, 0.000000000000f}, {0.121200000000f, 0.044580000000f, 0.000000000000f},
	{0.087400000000f, 0.032000000000f, 0.000000000000f}, {0.063600000000f, 0.023200000000f, 0.000000000000f},
	{0.046770000000f, 0.017000000000f, 0.000000000000f}, {0.032900000000f, 0.011920000000f, 0.000000000000f},
	{0.022700000000f, 0.008210000000f, 0.000000000000f}, {0.015840000000f, 0.005723000000f, 0.000000000000f},
	{0.011359160000f, 0.004102000000f, 0.000000000000f}, {0.008110916000f, 0.002929000000f, 0.000000000000f},

	{0.005790346000f, 0.002091000000f, 0.000000000000f}, {0.004109457000f, 0.001484000000f, 0.000000000000f},
	{0.002899327000f, 0.001047000000f, 0.000000000000f}, {0.002049190000f, 0.000740000000f, 0.000000000000f},
	{0.001439971000f, 0.000520000000f, 0.000000000000f}, {0.000999949300f, 0.000361100000f, 0.000000000000f},
	{0.000690078600f, 0.000249200000f, 0.000000000000f}, {0.000476021300f, 0.000171900000f, 0.000000000000f},
	{0.000332301100f, 0.000120000000f, 0.000000000000f}, {0.000234826100f, 0.000084800000f, 0.000000000000f},

	{0.000166150500f, 0.000060000000f, 0.000000000000f}, {0.000117413000f, 0.000042400000f, 0.000000000000f},
	{0.000083075270f, 0.000030000000f, 0.000000000000f}, {0.000058706520f, 0.000021200000f, 0.000000000000f},
	{0.000041509940f, 0.000014990000f, 0.000000000000f}, {0.000029353260f, 0.000010600000f, 0.000000000000f},
	{0.000020673830f, 0.000007465700f, 0.000000000000f}, {0.000014559770f, 0.000005257800f, 0.000000000000f},
	{0.000010253980f, 0.000003702900f, 0.000000000000f}, {0.000007221456f, 0.000002607800f, 0.000000000000f},

	{0.000005085868f, 0.000001836600f, 0.000000000000f}, {0.000003581652f, 0.000001293400f, 0.000000000000f},
	{0.000002522525f, 0.000000910930f, 0.000000000000f}, {0.000001776509f, 0.000000641530f, 0.000000000000f},
	{0.000001251141f, 0.000000451810f, 0.000000000000f}
}};

static const std::vector<std::pair<float, float>> ko_wavelength_amplitudes
{
	{300.f, 10.f}, {305.f, 4.8f}, {310.f, 2.7f}, {315.f, 1.35f}, {320.f, 0.8f}, {325.f, 0.38f}, {330.f, 0.16f}, {335.f, 0.075f}, {340.f, 0.04f}, {345.f, 0.019f}, {350.f, 0.007f}, {355.f, 0.f}, {445.f, 0.003f}, {450.f, 0.003f}, {455.f, 0.004f}, {460.f, 0.006f}, {465.f, 0.008f}, {470.f, 0.009f}, {475.f, 0.012f}, {480.f, 0.014f}, {485.f, 0.017f}, {490.f, 0.021f}, {495.f, 0.025f}, {500.f, 0.03f}, {505.f, 0.035f}, {510.f, 0.04f}, {515.f, 0.045f}, {520.f, 0.048f}, {525.f, 0.057f}, {530.f, 0.063f}, {535.f, 0.07f}, {540.f, 0.075f}, {545.f, 0.08f}, {550.f, 0.085f}, {555.f, 0.095f}, {560.f, 0.103f}, {565.f, 0.11f}, {570.f, 0.12f}, {575.f, 0.122f}, {580.f, 0.12f}, {585.f, 0.118f}, {590.f, 0.115f}, {595.f, 0.12f}, {600.f, 0.125f}, {605.f, 0.13f}, {610.f, 0.12f}, {620.f, 0.105f}, {630.f, 0.09f}, {640.f, 0.079f}, {650.f, 0.067f}, {660.f, 0.057f}, {670.f, 0.048f}, {680.f, 0.036f}, {690.f, 0.028f}, {700.f, 0.023f}, {710.f, 0.018f}, {720.f, 0.014f}, {730.f, 0.011f}, {740.f, 0.01f}, {750.f, 0.009f}, {760.f, 0.007f}, {770.f, 0.004f}, {780.f, 0.f}, {790.f, 0.f}
};

static const std::vector<std::pair<float, float>> kg_wavelength_amplitudes
{
	{759.f, 0.f}, {760.f, 3.0f}, {770.f, 0.210f}, { 771.f, 0.f }
};

static const std::vector<std::pair<float, float>> kwa_wavelength_amplitudes
{
	{689.f, 0.f}, {690.f, 0.016f}, {700.f, 0.024f}, {710.f, 0.0125f}, {720.f, 1.f}, {730.f, 0.87f}, {740.f, 0.061f}, {750.f, 0.001f}, {760.f, 1e-05f}, {770.f, 1e-05f}, {780.f, 0.0006f}, {790.f, 0.0175f}, {800.f, 0.036f}
};

//Sun Spectral Radiance [W / (m^2 sr nm)]
static const std::vector<float> sun_radiance
{
	1.65590e+2f,
	1.62337e+2f,
	2.11275e+2f,
	2.58882e+2f,
	2.58291e+2f,
	2.42323e+2f,
	2.67605e+2f,
	2.96583e+2f,
	3.05454e+2f,
	3.00575e+2f,
	3.06637e+2f,
	2.88304e+2f,
	2.87121e+2f,
	2.78250e+2f,
	2.71006e+2f,
	2.72336e+2f,
	2.63613e+2f,
	2.55038e+2f,
	2.50602e+2f,
	2.53116e+2f,
	2.53559e+2f,
	2.51342e+2f,
	2.46315e+2f,
	2.41732e+2f,
	2.36853e+2f,
	2.32121e+2f,
	2.28277e+2f,
	2.23398e+2f,
	2.19702e+2f,
	2.15267e+2f,
	2.10979e+2f,
	2.07283e+2f,
	2.02404e+2f,
	1.98708e+2f,
	1.94272e+2f,
	1.90724e+2f,
	1.86289e+2f,
	1.82592e+2
};

Rgb chromaMatch(float wl)
{
	if(wl < 360 || wl > 830) return Rgb{0.f};
	const int i = static_cast<int>((wl - 360) / 5);
	return { chroma_match_2_deg[i][0], chroma_match_2_deg[i][1], chroma_match_2_deg[i][2] };
}

} //namespace spectral_data

} //namespace yafaray

#endif /* YAFARAY_SPECTRAL_DATA_H */
